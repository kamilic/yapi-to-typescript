// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generator 只生成类型代码并写入文件: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestTestTestTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestTestTestTestResponse {}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestTestTestTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
  /**
   * 测试 trim 的值
   */
  trim?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestTestTestTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestTestTestTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestTestTestTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestTestTestTestRequest {
  id: number
  name: string
  likes: {}[]
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestTestTestTestResponse {}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestTestTestTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestTestTestTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestTestTestTestRequest {
  /**
   * X 值
   */
  x: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestTestTestTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestTestTestTestRequest {
  /**
   * X 值
   */
  x: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestTestTestTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test_test\`
 * @更新时间 1582161261
 */
export interface UploadTestTestTestTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test_test\`
 * @更新时间 1582161261
 */
export interface UploadTestTestTestTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestTestTestTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestTestTestTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestTestTestTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestTestTestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface TestTestTestTestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface TestTestTestTestTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestTestTestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestTestTestTestResponse {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestTestTestTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestTestTestTestResponse = any

/* prettier-ignore-end */
"
`;

exports[`Generator 只生成类型代码并写入文件: 输出内容 1`] = `
Array [
  "

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestTestTestTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestTestTestTestResponse {}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestTestTestTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
  /**
   * 测试 trim 的值
   */
  trim?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestTestTestTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestTestTestTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestTestTestTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestTestTestTestRequest {
  id: number;
  name: string;
  likes: {}[];
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestTestTestTestResponse {}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestTestTestTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestTestTestTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestTestTestTestRequest {
  /**
   * X 值
   */
  x: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestTestTestTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestTestTestTestRequest {
  /**
   * X 值
   */
  x: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestTestTestTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test_test\`
 * @更新时间 1582161261
 */
export interface UploadTestTestTestTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test_test\`
 * @更新时间 1582161261
 */
export interface UploadTestTestTestTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestTestTestTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestTestTestTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestTestTestTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestTestTestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface TestTestTestTestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface TestTestTestTestTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestTestTestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestTestTestTestResponse {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestTestTestTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestTestTestTestResponse = any",
]
`;

exports[`Generator 正确生成代码并写入文件 - 全部分类: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

// makeRequest
function makeRequestRequired<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequestOptional<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequest<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(requestConfig: TRequestConfig) {
  const optional = makeRequestOptional<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  const required = makeRequestRequired<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  return (requestConfig.requestDataOptional ? optional : required) as TRequestConfig['requestDataOptional'] extends true
    ? typeof optional
    : typeof required
}

// Request
export type Request<
  TReqeustData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_1 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_1 = '' as any
const prodUrl_0_0_0_1 = 'http://prod.com/' as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestTestTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestTestTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/deleteMethod_test_test_test',
    undefined,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestTestTestRequestConfig: DeleteMethodTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/deleteMethod_test_test_test',
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTestTestTest = makeRequest<
  DeleteMethodTestTestTestRequest,
  DeleteMethodTestTestTestResponse,
  DeleteMethodTestTestTestRequestConfig
>(deleteMethodTestTestTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestTestTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
  /**
   * 测试 trim 的值
   */
  trim?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestTestTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test\`
 * @更新时间 1568765164
 */
type GetMethodTestTestTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/getMethod_test_test_test', undefined, string, false>
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test\`
 * @更新时间 1568765164
 */
const getMethodTestTestTestRequestConfig: GetMethodTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/getMethod_test_test_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test\`
 * @更新时间 1568765164
 */
export const getMethodTestTestTest = makeRequest<
  GetMethodTestTestTestRequest,
  GetMethodTestTestTestResponse,
  GetMethodTestTestTestRequestConfig
>(getMethodTestTestTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestTestTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestTestTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/json5Response_test_test_test',
    undefined,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestTestTestRequestConfig: Json5ResponseTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/json5Response_test_test_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTestTestTest = makeRequest<
  Json5ResponseTestTestTestRequest,
  Json5ResponseTestTestTestResponse,
  Json5ResponseTestTestTestRequestConfig
>(json5ResponseTestTestTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestTestTestRequest {
  id: number
  name: string
  likes: {}[]
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestTestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test\`
 * @更新时间 1568765164
 */
type Json5RequestTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/json5Request_test_test_test',
    undefined,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test\`
 * @更新时间 1568765164
 */
const json5RequestTestTestTestRequestConfig: Json5RequestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/json5Request_test_test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test\`
 * @更新时间 1568765164
 */
export const json5RequestTestTestTest = makeRequest<
  Json5RequestTestTestTestRequest,
  Json5RequestTestTestTestResponse,
  Json5RequestTestTestTestRequestConfig
>(json5RequestTestTestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestTestTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestTestTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test\`
 * @更新时间 1568765164
 */
type PostMethodTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/postMethod_test_test_test',
    undefined,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test\`
 * @更新时间 1568765164
 */
const postMethodTestTestTestRequestConfig: PostMethodTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/postMethod_test_test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test\`
 * @更新时间 1568765164
 */
export const postMethodTestTestTest = makeRequest<
  PostMethodTestTestTestRequest,
  PostMethodTestTestTestResponse,
  PostMethodTestTestTestRequestConfig
>(postMethodTestTestTestRequestConfig)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestTestTestRequest {
  /**
   * X 值
   */
  x: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestTestTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test\`
 * @更新时间 1568765164
 */
type PutMethodTestTestTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/putMethod_test_test_test', undefined, string, false>
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test\`
 * @更新时间 1568765164
 */
const putMethodTestTestTestRequestConfig: PutMethodTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/putMethod_test_test_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test\`
 * @更新时间 1568765164
 */
export const putMethodTestTestTest = makeRequest<
  PutMethodTestTestTestRequest,
  PutMethodTestTestTestResponse,
  PutMethodTestTestTestRequestConfig
>(putMethodTestTestTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestTestTestRequest {
  /**
   * X 值
   */
  x: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestTestTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/dataKeyExample_test_test_test',
    undefined,
    string,
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestTestTestRequestConfig: DataKeyExampleTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/dataKeyExample_test_test_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTestTestTest = makeRequest<
  DataKeyExampleTestTestTestRequest,
  DataKeyExampleTestTestTestResponse,
  DataKeyExampleTestTestTestRequestConfig
>(dataKeyExampleTestTestTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test\`
 * @更新时间 1582161261
 */
export interface UploadTestTestTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test\`
 * @更新时间 1582161261
 */
export interface UploadTestTestTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test\`
 * @更新时间 1582161261
 */
type UploadTestTestTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/upload_test_test_test', undefined, string, false>
>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test\`
 * @更新时间 1582161261
 */
const uploadTestTestTestRequestConfig: UploadTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/upload_test_test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test\`
 * @更新时间 1582161261
 */
export const uploadTestTestTest = makeRequest<
  UploadTestTestTestRequest,
  UploadTestTestTestResponse,
  UploadTestTestTestRequestConfig
>(uploadTestTestTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestTestTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestTestTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/noResponseData_test_test_test',
    undefined,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestTestTestRequestConfig: NoResponseDataTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/noResponseData_test_test_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTestTestTest = makeRequest<
  NoResponseDataTestTestTestRequest,
  NoResponseDataTestTestTestResponse,
  NoResponseDataTestTestTestRequestConfig
>(noResponseDataTestTestTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestTestTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestTestTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/emptyResponse_test_test_test',
    undefined,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestTestTestRequestConfig: EmptyResponseTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/emptyResponse_test_test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTestTestTest = makeRequest<
  EmptyResponseTestTestTestRequest,
  EmptyResponseTestTestTestResponse,
  EmptyResponseTestTestTestRequestConfig
>(emptyResponseTestTestTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test\`
 * @更新时间 1568765165
 */
export interface TestTestTestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test\`
 * @更新时间 1568765165
 */
export interface TestTestTestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test\`
 * @更新时间 1568765165
 */
type TestTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/path/:id/hello/:name/:pass/{avatar}/:test_test_test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test\`
 * @更新时间 1568765165
 */
const testTestTestTestRequestConfig: TestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/path/:id/hello/:name/:pass/{avatar}/:test_test_test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  requestDataOptional: false,
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test\`
 * @更新时间 1568765165
 */
export const testTestTestTest = makeRequest<
  TestTestTestTestRequest,
  TestTestTestTestResponse,
  TestTestTestTestRequestConfig
>(testTestTestTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestTestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestTestTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test\`
 * @更新时间 1568765165
 */
type HihihiTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/test/{id}/:hihihi_test_test_test',
    undefined,
    'hihihi' | 'id',
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test\`
 * @更新时间 1568765165
 */
const hihihiTestTestTestRequestConfig: HihihiTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/test/{id}/:hihihi_test_test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: ['hihihi', 'id'],
  requestDataOptional: false,
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test\`
 * @更新时间 1568765165
 */
export const hihihiTestTestTest = makeRequest<
  HihihiTestTestTestRequest,
  HihihiTestTestTestResponse,
  HihihiTestTestTestRequestConfig
>(hihihiTestTestTestRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestTestTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestTestTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test\`
 * @更新时间 1568765166
 */
type RawResponseTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/rawResponse_test_test_test',
    undefined,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test\`
 * @更新时间 1568765166
 */
const rawResponseTestTestTestRequestConfig: RawResponseTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/rawResponse_test_test_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test\`
 * @更新时间 1568765166
 */
export const rawResponseTestTestTest = makeRequest<
  RawResponseTestTestTestRequest,
  RawResponseTestTestTestResponse,
  RawResponseTestTestTestRequestConfig
>(rawResponseTestTestTestRequestConfig)

const mockUrl_0_0_0_2 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_2 = '' as any
const prodUrl_0_0_0_2 = 'http://prod.com/' as any
const dataKey_0_0_0_2 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test\`
 * @更新时间 1575945946
 */
export interface Get2TestTestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test\`
 * @更新时间 1575945946
 */
export interface Get2TestTestResponse {
  msg: string
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test\`
 * @更新时间 1575945946
 */
type Get2TestTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/get2_test_test', undefined, string, true>
>

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test\`
 * @更新时间 1575945946
 */
const get2TestTestRequestConfig: Get2TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/get2_test_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test\`
 * @更新时间 1575945946
 */
export const get2TestTest = makeRequest<Get2TestTestRequest, Get2TestTestResponse, Get2TestTestRequestConfig>(
  get2TestTestRequestConfig,
)

const mockUrl_0_0_0_3 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_3 = '' as any
const prodUrl_0_0_0_3 = 'http://prod.com/' as any
const dataKey_0_0_0_3 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
type Picture_3dDetailTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/issue-17/picture_3d_detail_test',
    undefined,
    string,
    true
  >
>

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
const picture_3dDetailTestRequestConfig: Picture_3dDetailTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: '/issue-17/picture_3d_detail_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export const picture_3dDetailTest = makeRequest<
  Picture_3dDetailTestRequest,
  Picture_3dDetailTestResponse,
  Picture_3dDetailTestRequestConfig
>(picture_3dDetailTestRequestConfig)

/* prettier-ignore-end */
"
`;

exports[`Generator 正确生成代码并写入文件 - 全部分类: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 正确生成代码并写入文件 - 全部分类: 输出内容 1`] = `
Array [
  "",
  "const mockUrl_0_0_0_1 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_1 = \\"\\" as any
const prodUrl_0_0_0_1 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestTestTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestTestTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test\`
 * @更新时间 1568765163
*/
type DeleteMethodTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/deleteMethod_test_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test\`
 * @更新时间 1568765163
*/
const deleteMethodTestTestTestRequestConfig: DeleteMethodTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/deleteMethod_test_test_test\\",
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTestTestTest = makeRequest<DeleteMethodTestTestTestRequest, DeleteMethodTestTestTestResponse, DeleteMethodTestTestTestRequestConfig>(deleteMethodTestTestTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestTestTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
  /**
   * 测试 trim 的值
   */
  trim?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestTestTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test\`
 * @更新时间 1568765164
*/
type GetMethodTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/getMethod_test_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test\`
 * @更新时间 1568765164
*/
const getMethodTestTestTestRequestConfig: GetMethodTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/getMethod_test_test_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test\`
 * @更新时间 1568765164
 */
export const getMethodTestTestTest = makeRequest<GetMethodTestTestTestRequest, GetMethodTestTestTestResponse, GetMethodTestTestTestRequestConfig>(getMethodTestTestTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestTestTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestTestTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test\`
 * @更新时间 1568765164
*/
type Json5ResponseTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/json5Response_test_test_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test\`
 * @更新时间 1568765164
*/
const json5ResponseTestTestTestRequestConfig: Json5ResponseTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/json5Response_test_test_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTestTestTest = makeRequest<Json5ResponseTestTestTestRequest, Json5ResponseTestTestTestResponse, Json5ResponseTestTestTestRequestConfig>(json5ResponseTestTestTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestTestTestRequest {
  id: number;
  name: string;
  likes: {}[];
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestTestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test\`
 * @更新时间 1568765164
*/
type Json5RequestTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/json5Request_test_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test\`
 * @更新时间 1568765164
*/
const json5RequestTestTestTestRequestConfig: Json5RequestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/json5Request_test_test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test\`
 * @更新时间 1568765164
 */
export const json5RequestTestTestTest = makeRequest<Json5RequestTestTestTestRequest, Json5RequestTestTestTestResponse, Json5RequestTestTestTestRequestConfig>(json5RequestTestTestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestTestTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestTestTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test\`
 * @更新时间 1568765164
*/
type PostMethodTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/postMethod_test_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test\`
 * @更新时间 1568765164
*/
const postMethodTestTestTestRequestConfig: PostMethodTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/postMethod_test_test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test\`
 * @更新时间 1568765164
 */
export const postMethodTestTestTest = makeRequest<PostMethodTestTestTestRequest, PostMethodTestTestTestResponse, PostMethodTestTestTestRequestConfig>(postMethodTestTestTestRequestConfig)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestTestTestRequest {
  /**
   * X 值
   */
  x: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestTestTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test\`
 * @更新时间 1568765164
*/
type PutMethodTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/putMethod_test_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test\`
 * @更新时间 1568765164
*/
const putMethodTestTestTestRequestConfig: PutMethodTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/putMethod_test_test_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test\`
 * @更新时间 1568765164
 */
export const putMethodTestTestTest = makeRequest<PutMethodTestTestTestRequest, PutMethodTestTestTestResponse, PutMethodTestTestTestRequestConfig>(putMethodTestTestTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestTestTestRequest {
  /**
   * X 值
   */
  x: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestTestTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test\`
 * @更新时间 1568765165
*/
type DataKeyExampleTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/dataKeyExample_test_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test\`
 * @更新时间 1568765165
*/
const dataKeyExampleTestTestTestRequestConfig: DataKeyExampleTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/dataKeyExample_test_test_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTestTestTest = makeRequest<DataKeyExampleTestTestTestRequest, DataKeyExampleTestTestTestResponse, DataKeyExampleTestTestTestRequestConfig>(dataKeyExampleTestTestTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test\`
 * @更新时间 1582161261
 */
export interface UploadTestTestTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test\`
 * @更新时间 1582161261
 */
export interface UploadTestTestTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test\`
 * @更新时间 1582161261
*/
type UploadTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/upload_test_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test\`
 * @更新时间 1582161261
*/
const uploadTestTestTestRequestConfig: UploadTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/upload_test_test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test\`
 * @更新时间 1582161261
 */
export const uploadTestTestTest = makeRequest<UploadTestTestTestRequest, UploadTestTestTestResponse, UploadTestTestTestRequestConfig>(uploadTestTestTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestTestTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestTestTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test\`
 * @更新时间 1568765165
*/
type NoResponseDataTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/noResponseData_test_test_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test\`
 * @更新时间 1568765165
*/
const noResponseDataTestTestTestRequestConfig: NoResponseDataTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/noResponseData_test_test_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTestTestTest = makeRequest<NoResponseDataTestTestTestRequest, NoResponseDataTestTestTestResponse, NoResponseDataTestTestTestRequestConfig>(noResponseDataTestTestTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestTestTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestTestTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test\`
 * @更新时间 1568765165
*/
type EmptyResponseTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/emptyResponse_test_test_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test\`
 * @更新时间 1568765165
*/
const emptyResponseTestTestTestRequestConfig: EmptyResponseTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/emptyResponse_test_test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTestTestTest = makeRequest<EmptyResponseTestTestTestRequest, EmptyResponseTestTestTestResponse, EmptyResponseTestTestTestRequestConfig>(emptyResponseTestTestTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test\`
 * @更新时间 1568765165
 */
export interface TestTestTestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test\`
 * @更新时间 1568765165
 */
export interface TestTestTestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test\`
 * @更新时间 1568765165
*/
type TestTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/path/:id/hello/:name/:pass/{avatar}/:test_test_test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test\`
 * @更新时间 1568765165
*/
const testTestTestTestRequestConfig: TestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/path/:id/hello/:name/:pass/{avatar}/:test_test_test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  requestDataOptional: false,
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test\`
 * @更新时间 1568765165
 */
export const testTestTestTest = makeRequest<TestTestTestTestRequest, TestTestTestTestResponse, TestTestTestTestRequestConfig>(testTestTestTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestTestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestTestTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test\`
 * @更新时间 1568765165
*/
type HihihiTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/test/{id}/:hihihi_test_test_test\\",
  undefined,
  'hihihi' | 'id',
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test\`
 * @更新时间 1568765165
*/
const hihihiTestTestTestRequestConfig: HihihiTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/test/{id}/:hihihi_test_test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [\\"hihihi\\",\\"id\\"],
  requestDataOptional: false,
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test\`
 * @更新时间 1568765165
 */
export const hihihiTestTestTest = makeRequest<HihihiTestTestTestRequest, HihihiTestTestTestResponse, HihihiTestTestTestRequestConfig>(hihihiTestTestTestRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestTestTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestTestTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test\`
 * @更新时间 1568765166
*/
type RawResponseTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/rawResponse_test_test_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test\`
 * @更新时间 1568765166
*/
const rawResponseTestTestTestRequestConfig: RawResponseTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/rawResponse_test_test_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test\`
 * @更新时间 1568765166
 */
export const rawResponseTestTestTest = makeRequest<RawResponseTestTestTestRequest, RawResponseTestTestTestResponse, RawResponseTestTestTestRequestConfig>(rawResponseTestTestTestRequestConfig)",
  "const mockUrl_0_0_0_2 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_2 = \\"\\" as any
const prodUrl_0_0_0_2 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_2 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test\`
 * @更新时间 1575945946
 */
export interface Get2TestTestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test\`
 * @更新时间 1575945946
 */
export interface Get2TestTestResponse {
  msg: string;
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test\`
 * @更新时间 1575945946
*/
type Get2TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/get2_test_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test\`
 * @更新时间 1575945946
*/
const get2TestTestRequestConfig: Get2TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/get2_test_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test\`
 * @更新时间 1575945946
 */
export const get2TestTest = makeRequest<Get2TestTestRequest, Get2TestTestResponse, Get2TestTestRequestConfig>(get2TestTestRequestConfig)",
  "const mockUrl_0_0_0_3 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_3 = \\"\\" as any
const prodUrl_0_0_0_3 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_3 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
*/
type Picture_3dDetailTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/issue-17/picture_3d_detail_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
*/
const picture_3dDetailTestRequestConfig: Picture_3dDetailTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: \\"/issue-17/picture_3d_detail_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export const picture_3dDetailTest = makeRequest<Picture_3dDetailTestRequest, Picture_3dDetailTestResponse, Picture_3dDetailTestRequestConfig>(picture_3dDetailTestRequestConfig)",
]
`;

exports[`Generator 正确生成代码并写入文件 - 单分类: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

// makeRequest
function makeRequestRequired<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequestOptional<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequest<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(requestConfig: TRequestConfig) {
  const optional = makeRequestOptional<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  const required = makeRequestRequired<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  return (requestConfig.requestDataOptional ? optional : required) as TRequestConfig['requestDataOptional'] extends true
    ? typeof optional
    : typeof required
}

// Request
export type Request<
  TReqeustData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/deleteMethod_test', undefined, string, false>
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/deleteMethod_test',
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<
  DeleteMethodTestRequest,
  DeleteMethodTestResponse,
  DeleteMethodTestRequestConfig
>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
  /**
   * 测试 trim 的值
   */
  trim?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/getMethod_test', undefined, string, false>
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/getMethod_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(
  getMethodTestRequestConfig,
)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/json5Response_test', undefined, string, true>
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/json5Response_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<
  Json5ResponseTestRequest,
  Json5ResponseTestResponse,
  Json5ResponseTestRequestConfig
>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestRequest {
  id: number
  name: string
  likes: {}[]
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test\`
 * @更新时间 1568765164
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/json5Request_test', undefined, string, false>
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test\`
 * @更新时间 1568765164
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/json5Request_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test\`
 * @更新时间 1568765164
 */
export const json5RequestTest = makeRequest<
  Json5RequestTestRequest,
  Json5RequestTestResponse,
  Json5RequestTestRequestConfig
>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/postMethod_test', undefined, string, false>
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/postMethod_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(
  postMethodTestRequestConfig,
)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/putMethod_test', undefined, string, false>
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/putMethod_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(
  putMethodTestRequestConfig,
)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/dataKeyExample_test', undefined, string, false>
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/dataKeyExample_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<
  DataKeyExampleTestRequest,
  DataKeyExampleTestResponse,
  DataKeyExampleTestRequestConfig
>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/upload_test', undefined, string, false>
>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/upload_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(
  uploadTestRequestConfig,
)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/noResponseData_test', undefined, string, true>
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/noResponseData_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<
  NoResponseDataTestRequest,
  NoResponseDataTestResponse,
  NoResponseDataTestRequestConfig
>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/emptyResponse_test', undefined, string, true>
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/emptyResponse_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<
  EmptyResponseTestRequest,
  EmptyResponseTestResponse,
  EmptyResponseTestRequestConfig
>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  requestDataOptional: false,
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/test/{id}/:hihihi_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  requestDataOptional: false,
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(
  hihihiTestRequestConfig,
)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/rawResponse_test', undefined, string, true>
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/rawResponse_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<
  RawResponseTestRequest,
  RawResponseTestResponse,
  RawResponseTestRequestConfig
>(rawResponseTestRequestConfig)

/* prettier-ignore-end */
"
`;

exports[`Generator 正确生成代码并写入文件 - 单分类: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 正确生成代码并写入文件 - 单分类: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test\`
 * @更新时间 1568765163
*/
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/deleteMethod_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test\`
 * @更新时间 1568765163
*/
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/deleteMethod_test\\",
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<DeleteMethodTestRequest, DeleteMethodTestResponse, DeleteMethodTestRequestConfig>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
  /**
   * 测试 trim 的值
   */
  trim?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test\`
 * @更新时间 1568765164
*/
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/getMethod_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test\`
 * @更新时间 1568765164
*/
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/getMethod_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(getMethodTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test\`
 * @更新时间 1568765164
*/
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/json5Response_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test\`
 * @更新时间 1568765164
*/
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/json5Response_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<Json5ResponseTestRequest, Json5ResponseTestResponse, Json5ResponseTestRequestConfig>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestRequest {
  id: number;
  name: string;
  likes: {}[];
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test\`
 * @更新时间 1568765164
*/
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/json5Request_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test\`
 * @更新时间 1568765164
*/
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/json5Request_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test\`
 * @更新时间 1568765164
 */
export const json5RequestTest = makeRequest<Json5RequestTestRequest, Json5RequestTestResponse, Json5RequestTestRequestConfig>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test\`
 * @更新时间 1568765164
*/
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/postMethod_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test\`
 * @更新时间 1568765164
*/
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/postMethod_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(postMethodTestRequestConfig)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test\`
 * @更新时间 1568765164
*/
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/putMethod_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test\`
 * @更新时间 1568765164
*/
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/putMethod_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(putMethodTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test\`
 * @更新时间 1568765165
*/
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/dataKeyExample_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test\`
 * @更新时间 1568765165
*/
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/dataKeyExample_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<DataKeyExampleTestRequest, DataKeyExampleTestResponse, DataKeyExampleTestRequestConfig>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test\`
 * @更新时间 1582161261
*/
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/upload_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test\`
 * @更新时间 1582161261
*/
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/upload_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(uploadTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test\`
 * @更新时间 1568765165
*/
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/noResponseData_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test\`
 * @更新时间 1568765165
*/
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/noResponseData_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<NoResponseDataTestRequest, NoResponseDataTestResponse, NoResponseDataTestRequestConfig>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test\`
 * @更新时间 1568765165
*/
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/emptyResponse_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test\`
 * @更新时间 1568765165
*/
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/emptyResponse_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<EmptyResponseTestRequest, EmptyResponseTestResponse, EmptyResponseTestRequestConfig>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
*/
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
*/
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  requestDataOptional: false,
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test\`
 * @更新时间 1568765165
*/
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test\`
 * @更新时间 1568765165
*/
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  requestDataOptional: false,
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(hihihiTestRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test\`
 * @更新时间 1568765166
*/
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/rawResponse_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test\`
 * @更新时间 1568765166
*/
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/rawResponse_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<RawResponseTestRequest, RawResponseTestResponse, RawResponseTestRequestConfig>(rawResponseTestRequestConfig)",
]
`;

exports[`Generator 正确生成代码并写入文件 - 多分类: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

// makeRequest
function makeRequestRequired<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequestOptional<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequest<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(requestConfig: TRequestConfig) {
  const optional = makeRequestOptional<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  const required = makeRequestRequired<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  return (requestConfig.requestDataOptional ? optional : required) as TRequestConfig['requestDataOptional'] extends true
    ? typeof optional
    : typeof required
}

// Request
export type Request<
  TReqeustData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/deleteMethod_test_test', undefined, string, false>
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestTestRequestConfig: DeleteMethodTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/deleteMethod_test_test',
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTestTest = makeRequest<
  DeleteMethodTestTestRequest,
  DeleteMethodTestTestResponse,
  DeleteMethodTestTestRequestConfig
>(deleteMethodTestTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
  /**
   * 测试 trim 的值
   */
  trim?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test\`
 * @更新时间 1568765164
 */
type GetMethodTestTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/getMethod_test_test', undefined, string, false>
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test\`
 * @更新时间 1568765164
 */
const getMethodTestTestRequestConfig: GetMethodTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/getMethod_test_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test\`
 * @更新时间 1568765164
 */
export const getMethodTestTest = makeRequest<
  GetMethodTestTestRequest,
  GetMethodTestTestResponse,
  GetMethodTestTestRequestConfig
>(getMethodTestTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/json5Response_test_test', undefined, string, true>
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestTestRequestConfig: Json5ResponseTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/json5Response_test_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTestTest = makeRequest<
  Json5ResponseTestTestRequest,
  Json5ResponseTestTestResponse,
  Json5ResponseTestTestRequestConfig
>(json5ResponseTestTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestTestRequest {
  id: number
  name: string
  likes: {}[]
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test\`
 * @更新时间 1568765164
 */
type Json5RequestTestTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/json5Request_test_test', undefined, string, false>
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test\`
 * @更新时间 1568765164
 */
const json5RequestTestTestRequestConfig: Json5RequestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/json5Request_test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test\`
 * @更新时间 1568765164
 */
export const json5RequestTestTest = makeRequest<
  Json5RequestTestTestRequest,
  Json5RequestTestTestResponse,
  Json5RequestTestTestRequestConfig
>(json5RequestTestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test\`
 * @更新时间 1568765164
 */
type PostMethodTestTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/postMethod_test_test', undefined, string, false>
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test\`
 * @更新时间 1568765164
 */
const postMethodTestTestRequestConfig: PostMethodTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/postMethod_test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test\`
 * @更新时间 1568765164
 */
export const postMethodTestTest = makeRequest<
  PostMethodTestTestRequest,
  PostMethodTestTestResponse,
  PostMethodTestTestRequestConfig
>(postMethodTestTestRequestConfig)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestTestRequest {
  /**
   * X 值
   */
  x: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test\`
 * @更新时间 1568765164
 */
type PutMethodTestTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/putMethod_test_test', undefined, string, false>
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test\`
 * @更新时间 1568765164
 */
const putMethodTestTestRequestConfig: PutMethodTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/putMethod_test_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test\`
 * @更新时间 1568765164
 */
export const putMethodTestTest = makeRequest<
  PutMethodTestTestRequest,
  PutMethodTestTestResponse,
  PutMethodTestTestRequestConfig
>(putMethodTestTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestTestRequest {
  /**
   * X 值
   */
  x: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/dataKeyExample_test_test', undefined, string, false>
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestTestRequestConfig: DataKeyExampleTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/dataKeyExample_test_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTestTest = makeRequest<
  DataKeyExampleTestTestRequest,
  DataKeyExampleTestTestResponse,
  DataKeyExampleTestTestRequestConfig
>(dataKeyExampleTestTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test\`
 * @更新时间 1582161261
 */
export interface UploadTestTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test\`
 * @更新时间 1582161261
 */
export interface UploadTestTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test\`
 * @更新时间 1582161261
 */
type UploadTestTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/upload_test_test', undefined, string, false>
>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test\`
 * @更新时间 1582161261
 */
const uploadTestTestRequestConfig: UploadTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/upload_test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test\`
 * @更新时间 1582161261
 */
export const uploadTestTest = makeRequest<UploadTestTestRequest, UploadTestTestResponse, UploadTestTestRequestConfig>(
  uploadTestTestRequestConfig,
)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/noResponseData_test_test', undefined, string, true>
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestTestRequestConfig: NoResponseDataTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/noResponseData_test_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTestTest = makeRequest<
  NoResponseDataTestTestRequest,
  NoResponseDataTestTestResponse,
  NoResponseDataTestTestRequestConfig
>(noResponseDataTestTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/emptyResponse_test_test', undefined, string, true>
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestTestRequestConfig: EmptyResponseTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/emptyResponse_test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTestTest = makeRequest<
  EmptyResponseTestTestRequest,
  EmptyResponseTestTestResponse,
  EmptyResponseTestTestRequestConfig
>(emptyResponseTestTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test\`
 * @更新时间 1568765165
 */
export interface TestTestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test\`
 * @更新时间 1568765165
 */
export interface TestTestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test\`
 * @更新时间 1568765165
 */
type TestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/path/:id/hello/:name/:pass/{avatar}/:test_test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test\`
 * @更新时间 1568765165
 */
const testTestTestRequestConfig: TestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/path/:id/hello/:name/:pass/{avatar}/:test_test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  requestDataOptional: false,
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test\`
 * @更新时间 1568765165
 */
export const testTestTest = makeRequest<TestTestTestRequest, TestTestTestResponse, TestTestTestRequestConfig>(
  testTestTestRequestConfig,
)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test\`
 * @更新时间 1568765165
 */
type HihihiTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/test/{id}/:hihihi_test_test',
    undefined,
    'hihihi' | 'id',
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test\`
 * @更新时间 1568765165
 */
const hihihiTestTestRequestConfig: HihihiTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/test/{id}/:hihihi_test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  requestDataOptional: false,
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test\`
 * @更新时间 1568765165
 */
export const hihihiTestTest = makeRequest<HihihiTestTestRequest, HihihiTestTestResponse, HihihiTestTestRequestConfig>(
  hihihiTestTestRequestConfig,
)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test\`
 * @更新时间 1568765166
 */
type RawResponseTestTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/rawResponse_test_test', undefined, string, true>
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test\`
 * @更新时间 1568765166
 */
const rawResponseTestTestRequestConfig: RawResponseTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/rawResponse_test_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test\`
 * @更新时间 1568765166
 */
export const rawResponseTestTest = makeRequest<
  RawResponseTestTestRequest,
  RawResponseTestTestResponse,
  RawResponseTestTestRequestConfig
>(rawResponseTestTestRequestConfig)

const mockUrl_0_0_0_1 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_1 = '' as any
const prodUrl_0_0_0_1 = 'http://prod.com/' as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestResponse {
  msg: string
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test\`
 * @更新时间 1575945946
 */
type Get2TestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/get2_test', undefined, string, true>
>

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test\`
 * @更新时间 1575945946
 */
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/get2_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test\`
 * @更新时间 1575945946
 */
export const get2Test = makeRequest<Get2TestRequest, Get2TestResponse, Get2TestRequestConfig>(get2TestRequestConfig)

/* prettier-ignore-end */
"
`;

exports[`Generator 正确生成代码并写入文件 - 多分类: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 正确生成代码并写入文件 - 多分类: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test\`
 * @更新时间 1568765163
*/
type DeleteMethodTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/deleteMethod_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test\`
 * @更新时间 1568765163
*/
const deleteMethodTestTestRequestConfig: DeleteMethodTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/deleteMethod_test_test\\",
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTestTest = makeRequest<DeleteMethodTestTestRequest, DeleteMethodTestTestResponse, DeleteMethodTestTestRequestConfig>(deleteMethodTestTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
  /**
   * 测试 trim 的值
   */
  trim?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test\`
 * @更新时间 1568765164
*/
type GetMethodTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/getMethod_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test\`
 * @更新时间 1568765164
*/
const getMethodTestTestRequestConfig: GetMethodTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/getMethod_test_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test\`
 * @更新时间 1568765164
 */
export const getMethodTestTest = makeRequest<GetMethodTestTestRequest, GetMethodTestTestResponse, GetMethodTestTestRequestConfig>(getMethodTestTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test\`
 * @更新时间 1568765164
*/
type Json5ResponseTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/json5Response_test_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test\`
 * @更新时间 1568765164
*/
const json5ResponseTestTestRequestConfig: Json5ResponseTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/json5Response_test_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTestTest = makeRequest<Json5ResponseTestTestRequest, Json5ResponseTestTestResponse, Json5ResponseTestTestRequestConfig>(json5ResponseTestTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestTestRequest {
  id: number;
  name: string;
  likes: {}[];
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test\`
 * @更新时间 1568765164
*/
type Json5RequestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/json5Request_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test\`
 * @更新时间 1568765164
*/
const json5RequestTestTestRequestConfig: Json5RequestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/json5Request_test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test\`
 * @更新时间 1568765164
 */
export const json5RequestTestTest = makeRequest<Json5RequestTestTestRequest, Json5RequestTestTestResponse, Json5RequestTestTestRequestConfig>(json5RequestTestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test\`
 * @更新时间 1568765164
*/
type PostMethodTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/postMethod_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test\`
 * @更新时间 1568765164
*/
const postMethodTestTestRequestConfig: PostMethodTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/postMethod_test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test\`
 * @更新时间 1568765164
 */
export const postMethodTestTest = makeRequest<PostMethodTestTestRequest, PostMethodTestTestResponse, PostMethodTestTestRequestConfig>(postMethodTestTestRequestConfig)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestTestRequest {
  /**
   * X 值
   */
  x: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test\`
 * @更新时间 1568765164
*/
type PutMethodTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/putMethod_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test\`
 * @更新时间 1568765164
*/
const putMethodTestTestRequestConfig: PutMethodTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/putMethod_test_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test\`
 * @更新时间 1568765164
 */
export const putMethodTestTest = makeRequest<PutMethodTestTestRequest, PutMethodTestTestResponse, PutMethodTestTestRequestConfig>(putMethodTestTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestTestRequest {
  /**
   * X 值
   */
  x: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test\`
 * @更新时间 1568765165
*/
type DataKeyExampleTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/dataKeyExample_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test\`
 * @更新时间 1568765165
*/
const dataKeyExampleTestTestRequestConfig: DataKeyExampleTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/dataKeyExample_test_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTestTest = makeRequest<DataKeyExampleTestTestRequest, DataKeyExampleTestTestResponse, DataKeyExampleTestTestRequestConfig>(dataKeyExampleTestTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test\`
 * @更新时间 1582161261
 */
export interface UploadTestTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test\`
 * @更新时间 1582161261
 */
export interface UploadTestTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test\`
 * @更新时间 1582161261
*/
type UploadTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/upload_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test\`
 * @更新时间 1582161261
*/
const uploadTestTestRequestConfig: UploadTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/upload_test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test\`
 * @更新时间 1582161261
 */
export const uploadTestTest = makeRequest<UploadTestTestRequest, UploadTestTestResponse, UploadTestTestRequestConfig>(uploadTestTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test\`
 * @更新时间 1568765165
*/
type NoResponseDataTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/noResponseData_test_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test\`
 * @更新时间 1568765165
*/
const noResponseDataTestTestRequestConfig: NoResponseDataTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/noResponseData_test_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTestTest = makeRequest<NoResponseDataTestTestRequest, NoResponseDataTestTestResponse, NoResponseDataTestTestRequestConfig>(noResponseDataTestTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test\`
 * @更新时间 1568765165
*/
type EmptyResponseTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/emptyResponse_test_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test\`
 * @更新时间 1568765165
*/
const emptyResponseTestTestRequestConfig: EmptyResponseTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/emptyResponse_test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTestTest = makeRequest<EmptyResponseTestTestRequest, EmptyResponseTestTestResponse, EmptyResponseTestTestRequestConfig>(emptyResponseTestTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test\`
 * @更新时间 1568765165
 */
export interface TestTestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test\`
 * @更新时间 1568765165
 */
export interface TestTestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test\`
 * @更新时间 1568765165
*/
type TestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/path/:id/hello/:name/:pass/{avatar}/:test_test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test\`
 * @更新时间 1568765165
*/
const testTestTestRequestConfig: TestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/path/:id/hello/:name/:pass/{avatar}/:test_test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  requestDataOptional: false,
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test\`
 * @更新时间 1568765165
 */
export const testTestTest = makeRequest<TestTestTestRequest, TestTestTestResponse, TestTestTestRequestConfig>(testTestTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test\`
 * @更新时间 1568765165
*/
type HihihiTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/test/{id}/:hihihi_test_test\\",
  undefined,
  'hihihi' | 'id',
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test\`
 * @更新时间 1568765165
*/
const hihihiTestTestRequestConfig: HihihiTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/test/{id}/:hihihi_test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  requestDataOptional: false,
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test\`
 * @更新时间 1568765165
 */
export const hihihiTestTest = makeRequest<HihihiTestTestRequest, HihihiTestTestResponse, HihihiTestTestRequestConfig>(hihihiTestTestRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test\`
 * @更新时间 1568765166
*/
type RawResponseTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/rawResponse_test_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test\`
 * @更新时间 1568765166
*/
const rawResponseTestTestRequestConfig: RawResponseTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/rawResponse_test_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test\`
 * @更新时间 1568765166
 */
export const rawResponseTestTest = makeRequest<RawResponseTestTestRequest, RawResponseTestTestResponse, RawResponseTestTestRequestConfig>(rawResponseTestTestRequestConfig)",
  "const mockUrl_0_0_0_1 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_1 = \\"\\" as any
const prodUrl_0_0_0_1 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestResponse {
  msg: string;
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test\`
 * @更新时间 1575945946
*/
type Get2TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/get2_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test\`
 * @更新时间 1575945946
*/
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/get2_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test\`
 * @更新时间 1575945946
 */
export const get2Test = makeRequest<Get2TestRequest, Get2TestResponse, Get2TestRequestConfig>(get2TestRequestConfig)",
]
`;

exports[`Generator 正确生成代码并写入文件 - 排除分类: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

// makeRequest
function makeRequestRequired<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequestOptional<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequest<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(requestConfig: TRequestConfig) {
  const optional = makeRequestOptional<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  const required = makeRequestRequired<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  return (requestConfig.requestDataOptional ? optional : required) as TRequestConfig['requestDataOptional'] extends true
    ? typeof optional
    : typeof required
}

// Request
export type Request<
  TReqeustData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_1 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_1 = '' as any
const prodUrl_0_0_0_1 = 'http://prod.com/' as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test_test\`
 * @更新时间 1575945946
 */
export interface Get2TestTestTestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test_test\`
 * @更新时间 1575945946
 */
export interface Get2TestTestTestResponse {
  msg: string
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test_test\`
 * @更新时间 1575945946
 */
type Get2TestTestTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/get2_test_test_test', undefined, string, true>
>

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test_test\`
 * @更新时间 1575945946
 */
const get2TestTestTestRequestConfig: Get2TestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/get2_test_test_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test_test\`
 * @更新时间 1575945946
 */
export const get2TestTestTest = makeRequest<
  Get2TestTestTestRequest,
  Get2TestTestTestResponse,
  Get2TestTestTestRequestConfig
>(get2TestTestTestRequestConfig)

const mockUrl_0_0_0_2 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_2 = '' as any
const prodUrl_0_0_0_2 = 'http://prod.com/' as any
const dataKey_0_0_0_2 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestTestRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestTestResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test_test\`
 * @更新时间 1575455147
 */
type Picture_3dDetailTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/issue-17/picture_3d_detail_test_test',
    undefined,
    string,
    true
  >
>

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test_test\`
 * @更新时间 1575455147
 */
const picture_3dDetailTestTestRequestConfig: Picture_3dDetailTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/issue-17/picture_3d_detail_test_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test_test\`
 * @更新时间 1575455147
 */
export const picture_3dDetailTestTest = makeRequest<
  Picture_3dDetailTestTestRequest,
  Picture_3dDetailTestTestResponse,
  Picture_3dDetailTestTestRequestConfig
>(picture_3dDetailTestTestRequestConfig)

/* prettier-ignore-end */
"
`;

exports[`Generator 正确生成代码并写入文件 - 排除分类: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 正确生成代码并写入文件 - 排除分类: 输出内容 1`] = `
Array [
  "",
  "const mockUrl_0_0_0_1 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_1 = \\"\\" as any
const prodUrl_0_0_0_1 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test_test\`
 * @更新时间 1575945946
 */
export interface Get2TestTestTestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test_test\`
 * @更新时间 1575945946
 */
export interface Get2TestTestTestResponse {
  msg: string;
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test_test\`
 * @更新时间 1575945946
*/
type Get2TestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/get2_test_test_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test_test\`
 * @更新时间 1575945946
*/
const get2TestTestTestRequestConfig: Get2TestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/get2_test_test_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /get2_test_test_test\`
 * @更新时间 1575945946
 */
export const get2TestTestTest = makeRequest<Get2TestTestTestRequest, Get2TestTestTestResponse, Get2TestTestTestRequestConfig>(get2TestTestTestRequestConfig)",
  "const mockUrl_0_0_0_2 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_2 = \\"\\" as any
const prodUrl_0_0_0_2 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_2 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestTestRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestTestResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test_test\`
 * @更新时间 1575455147
*/
type Picture_3dDetailTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/issue-17/picture_3d_detail_test_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test_test\`
 * @更新时间 1575455147
*/
const picture_3dDetailTestTestRequestConfig: Picture_3dDetailTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/issue-17/picture_3d_detail_test_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /issue-17/picture_3d_detail_test_test\`
 * @更新时间 1575455147
 */
export const picture_3dDetailTestTest = makeRequest<Picture_3dDetailTestTestRequest, Picture_3dDetailTestTestResponse, Picture_3dDetailTestTestRequestConfig>(picture_3dDetailTestTestRequestConfig)",
]
`;

exports[`Generator 生成 React Hooks 代码: Hook 生成文件 1`] = `
"import { useState, useEffect } from 'react'
import { RequestConfig } from 'yapi-to-typescript'
import { Request } from \\"./index\\"
import baseRequest from \\"./request\\"

export default function makeRequestHook<TRequestData, TRequestConfig extends RequestConfig, TRequestResult extends ReturnType<typeof baseRequest>>(request: Request<TRequestData, TRequestConfig, TRequestResult>) {
  type Data = TRequestResult extends Promise<infer R> ? R : TRequestResult
  return function useRequest(requestData: TRequestData) {
    // 一个简单的 Hook 实现，实际项目可结合其他库使用，比如：
    // @umijs/hooks 的 useRequest (https://github.com/umijs/hooks)
    // swr (https://github.com/zeit/swr)

    const [loading, setLoading] = useState(true)
    const [data, setData] = useState<Data>()

    useEffect(() => {
      request(requestData).then(data => {
        setLoading(false)
        setData(data as any)
      })
    }, [JSON.stringify(requestData)])

    return {
      loading,
      data,
    }
  }
}"
`;

exports[`Generator 生成 React Hooks 代码: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'
// @ts-ignore
import makeRequestHook from './makeRequestHook'

// makeRequest
function makeRequestRequired<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequestOptional<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequest<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(requestConfig: TRequestConfig) {
  const optional = makeRequestOptional<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  const required = makeRequestRequired<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  return (requestConfig.requestDataOptional ? optional : required) as TRequestConfig['requestDataOptional'] extends true
    ? typeof optional
    : typeof required
}

// Request
export type Request<
  TReqeustData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test_test_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestTestTestTestTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test_test_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestTestTestTestTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test_test_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestTestTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/deleteMethod_test_test_test_test_test',
    undefined,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test_test_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestTestTestTestTestRequestConfig: DeleteMethodTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/deleteMethod_test_test_test_test_test',
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test_test_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTestTestTestTestTest = makeRequest<
  DeleteMethodTestTestTestTestTestRequest,
  DeleteMethodTestTestTestTestTestResponse,
  DeleteMethodTestTestTestTestTestRequestConfig
>(deleteMethodTestTestTestTestTestRequestConfig)

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test_test_test\`
 * @更新时间 1568765163
 */
export const useDeleteMethodTestTestTestTestTest = makeRequestHook<
  DeleteMethodTestTestTestTestTestRequest,
  DeleteMethodTestTestTestTestTestRequestConfig,
  ReturnType<typeof deleteMethodTestTestTestTestTest>
>(deleteMethodTestTestTestTestTest)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestTestTestTestTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
  /**
   * 测试 trim 的值
   */
  trim?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestTestTestTestTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
type GetMethodTestTestTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/getMethod_test_test_test_test_test',
    undefined,
    string,
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
const getMethodTestTestTestTestTestRequestConfig: GetMethodTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/getMethod_test_test_test_test_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const getMethodTestTestTestTestTest = makeRequest<
  GetMethodTestTestTestTestTestRequest,
  GetMethodTestTestTestTestTestResponse,
  GetMethodTestTestTestTestTestRequestConfig
>(getMethodTestTestTestTestTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const useGetMethodTestTestTestTestTest = makeRequestHook<
  GetMethodTestTestTestTestTestRequest,
  GetMethodTestTestTestTestTestRequestConfig,
  ReturnType<typeof getMethodTestTestTestTestTest>
>(getMethodTestTestTestTestTest)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestTestTestTestTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestTestTestTestTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test_test_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestTestTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/json5Response_test_test_test_test_test',
    undefined,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test_test_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestTestTestTestTestRequestConfig: Json5ResponseTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/json5Response_test_test_test_test_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTestTestTestTestTest = makeRequest<
  Json5ResponseTestTestTestTestTestRequest,
  Json5ResponseTestTestTestTestTestResponse,
  Json5ResponseTestTestTestTestTestRequestConfig
>(json5ResponseTestTestTestTestTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const useJson5ResponseTestTestTestTestTest = makeRequestHook<
  Json5ResponseTestTestTestTestTestRequest,
  Json5ResponseTestTestTestTestTestRequestConfig,
  ReturnType<typeof json5ResponseTestTestTestTestTest>
>(json5ResponseTestTestTestTestTest)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestTestTestTestTestRequest {
  id: number
  name: string
  likes: {}[]
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestTestTestTestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test_test_test\`
 * @更新时间 1568765164
 */
type Json5RequestTestTestTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/json5Request_test_test_test_test_test',
    undefined,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test_test_test\`
 * @更新时间 1568765164
 */
const json5RequestTestTestTestTestTestRequestConfig: Json5RequestTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/json5Request_test_test_test_test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const json5RequestTestTestTestTestTest = makeRequest<
  Json5RequestTestTestTestTestTestRequest,
  Json5RequestTestTestTestTestTestResponse,
  Json5RequestTestTestTestTestTestRequestConfig
>(json5RequestTestTestTestTestTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const useJson5RequestTestTestTestTestTest = makeRequestHook<
  Json5RequestTestTestTestTestTestRequest,
  Json5RequestTestTestTestTestTestRequestConfig,
  ReturnType<typeof json5RequestTestTestTestTestTest>
>(json5RequestTestTestTestTestTest)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestTestTestTestTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestTestTestTestTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
type PostMethodTestTestTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/postMethod_test_test_test_test_test',
    undefined,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
const postMethodTestTestTestTestTestRequestConfig: PostMethodTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/postMethod_test_test_test_test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const postMethodTestTestTestTestTest = makeRequest<
  PostMethodTestTestTestTestTestRequest,
  PostMethodTestTestTestTestTestResponse,
  PostMethodTestTestTestTestTestRequestConfig
>(postMethodTestTestTestTestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const usePostMethodTestTestTestTestTest = makeRequestHook<
  PostMethodTestTestTestTestTestRequest,
  PostMethodTestTestTestTestTestRequestConfig,
  ReturnType<typeof postMethodTestTestTestTestTest>
>(postMethodTestTestTestTestTest)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestTestTestTestTestRequest {
  /**
   * X 值
   */
  x: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestTestTestTestTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
type PutMethodTestTestTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/putMethod_test_test_test_test_test',
    undefined,
    string,
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
const putMethodTestTestTestTestTestRequestConfig: PutMethodTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/putMethod_test_test_test_test_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const putMethodTestTestTestTestTest = makeRequest<
  PutMethodTestTestTestTestTestRequest,
  PutMethodTestTestTestTestTestResponse,
  PutMethodTestTestTestTestTestRequestConfig
>(putMethodTestTestTestTestTestRequestConfig)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const usePutMethodTestTestTestTestTest = makeRequestHook<
  PutMethodTestTestTestTestTestRequest,
  PutMethodTestTestTestTestTestRequestConfig,
  ReturnType<typeof putMethodTestTestTestTestTest>
>(putMethodTestTestTestTestTest)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestTestTestTestTestRequest {
  /**
   * X 值
   */
  x: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestTestTestTestTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test_test_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestTestTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/dataKeyExample_test_test_test_test_test',
    undefined,
    string,
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test_test_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestTestTestTestTestRequestConfig: DataKeyExampleTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/dataKeyExample_test_test_test_test_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTestTestTestTestTest = makeRequest<
  DataKeyExampleTestTestTestTestTestRequest,
  DataKeyExampleTestTestTestTestTestResponse,
  DataKeyExampleTestTestTestTestTestRequestConfig
>(dataKeyExampleTestTestTestTestTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const useDataKeyExampleTestTestTestTestTest = makeRequestHook<
  DataKeyExampleTestTestTestTestTestRequest,
  DataKeyExampleTestTestTestTestTestRequestConfig,
  ReturnType<typeof dataKeyExampleTestTestTestTestTest>
>(dataKeyExampleTestTestTestTestTest)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test_test_test\`
 * @更新时间 1582161261
 */
export interface UploadTestTestTestTestTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test_test_test\`
 * @更新时间 1582161261
 */
export interface UploadTestTestTestTestTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test_test_test\`
 * @更新时间 1582161261
 */
type UploadTestTestTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/upload_test_test_test_test_test',
    undefined,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test_test_test\`
 * @更新时间 1582161261
 */
const uploadTestTestTestTestTestRequestConfig: UploadTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/upload_test_test_test_test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test_test_test\`
 * @更新时间 1582161261
 */
export const uploadTestTestTestTestTest = makeRequest<
  UploadTestTestTestTestTestRequest,
  UploadTestTestTestTestTestResponse,
  UploadTestTestTestTestTestRequestConfig
>(uploadTestTestTestTestTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test_test_test\`
 * @更新时间 1582161261
 */
export const useUploadTestTestTestTestTest = makeRequestHook<
  UploadTestTestTestTestTestRequest,
  UploadTestTestTestTestTestRequestConfig,
  ReturnType<typeof uploadTestTestTestTestTest>
>(uploadTestTestTestTestTest)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestTestTestTestTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestTestTestTestTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test_test_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestTestTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/noResponseData_test_test_test_test_test',
    undefined,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test_test_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestTestTestTestTestRequestConfig: NoResponseDataTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/noResponseData_test_test_test_test_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTestTestTestTestTest = makeRequest<
  NoResponseDataTestTestTestTestTestRequest,
  NoResponseDataTestTestTestTestTestResponse,
  NoResponseDataTestTestTestTestTestRequestConfig
>(noResponseDataTestTestTestTestTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const useNoResponseDataTestTestTestTestTest = makeRequestHook<
  NoResponseDataTestTestTestTestTestRequest,
  NoResponseDataTestTestTestTestTestRequestConfig,
  ReturnType<typeof noResponseDataTestTestTestTestTest>
>(noResponseDataTestTestTestTestTest)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestTestTestTestTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestTestTestTestTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test_test_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestTestTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/emptyResponse_test_test_test_test_test',
    undefined,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test_test_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestTestTestTestTestRequestConfig: EmptyResponseTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/emptyResponse_test_test_test_test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTestTestTestTestTest = makeRequest<
  EmptyResponseTestTestTestTestTestRequest,
  EmptyResponseTestTestTestTestTestResponse,
  EmptyResponseTestTestTestTestTestRequestConfig
>(emptyResponseTestTestTestTestTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const useEmptyResponseTestTestTestTestTest = makeRequestHook<
  EmptyResponseTestTestTestTestTestRequest,
  EmptyResponseTestTestTestTestTestRequestConfig,
  ReturnType<typeof emptyResponseTestTestTestTestTest>
>(emptyResponseTestTestTestTestTest)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface TestTestTestTestTestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface TestTestTestTestTestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test_test\`
 * @更新时间 1568765165
 */
type TestTestTestTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test_test\`
 * @更新时间 1568765165
 */
const testTestTestTestTestTestRequestConfig: TestTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  requestDataOptional: false,
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const testTestTestTestTestTest = makeRequest<
  TestTestTestTestTestTestRequest,
  TestTestTestTestTestTestResponse,
  TestTestTestTestTestTestRequestConfig
>(testTestTestTestTestTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const useTestTestTestTestTestTest = makeRequestHook<
  TestTestTestTestTestTestRequest,
  TestTestTestTestTestTestRequestConfig,
  ReturnType<typeof testTestTestTestTestTest>
>(testTestTestTestTestTest)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestTestTestTestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestTestTestTestTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test_test_test\`
 * @更新时间 1568765165
 */
type HihihiTestTestTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/test/{id}/:hihihi_test_test_test_test_test',
    undefined,
    'hihihi' | 'id',
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test_test_test\`
 * @更新时间 1568765165
 */
const hihihiTestTestTestTestTestRequestConfig: HihihiTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/test/{id}/:hihihi_test_test_test_test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  requestDataOptional: false,
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const hihihiTestTestTestTestTest = makeRequest<
  HihihiTestTestTestTestTestRequest,
  HihihiTestTestTestTestTestResponse,
  HihihiTestTestTestTestTestRequestConfig
>(hihihiTestTestTestTestTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const useHihihiTestTestTestTestTest = makeRequestHook<
  HihihiTestTestTestTestTestRequest,
  HihihiTestTestTestTestTestRequestConfig,
  ReturnType<typeof hihihiTestTestTestTestTest>
>(hihihiTestTestTestTestTest)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test_test_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestTestTestTestTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test_test_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestTestTestTestTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test_test_test\`
 * @更新时间 1568765166
 */
type RawResponseTestTestTestTestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/rawResponse_test_test_test_test_test',
    undefined,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test_test_test\`
 * @更新时间 1568765166
 */
const rawResponseTestTestTestTestTestRequestConfig: RawResponseTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/rawResponse_test_test_test_test_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test_test_test\`
 * @更新时间 1568765166
 */
export const rawResponseTestTestTestTestTest = makeRequest<
  RawResponseTestTestTestTestTestRequest,
  RawResponseTestTestTestTestTestResponse,
  RawResponseTestTestTestTestTestRequestConfig
>(rawResponseTestTestTestTestTestRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test_test_test\`
 * @更新时间 1568765166
 */
export const useRawResponseTestTestTestTestTest = makeRequestHook<
  RawResponseTestTestTestTestTestRequest,
  RawResponseTestTestTestTestTestRequestConfig,
  ReturnType<typeof rawResponseTestTestTestTestTest>
>(rawResponseTestTestTestTestTest)

/* prettier-ignore-end */
"
`;

exports[`Generator 生成 React Hooks 代码: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 生成 React Hooks 代码: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test_test_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestTestTestTestTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test_test_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestTestTestTestTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test_test_test\`
 * @更新时间 1568765163
*/
type DeleteMethodTestTestTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/deleteMethod_test_test_test_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test_test_test\`
 * @更新时间 1568765163
*/
const deleteMethodTestTestTestTestTestRequestConfig: DeleteMethodTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/deleteMethod_test_test_test_test_test\\",
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test_test_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTestTestTestTestTest = makeRequest<DeleteMethodTestTestTestTestTestRequest, DeleteMethodTestTestTestTestTestResponse, DeleteMethodTestTestTestTestTestRequestConfig>(deleteMethodTestTestTestTestTestRequestConfig)

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod_test_test_test_test_test\`
 * @更新时间 1568765163
 */
export const useDeleteMethodTestTestTestTestTest = makeRequestHook<DeleteMethodTestTestTestTestTestRequest, DeleteMethodTestTestTestTestTestRequestConfig, ReturnType<typeof deleteMethodTestTestTestTestTest>>(deleteMethodTestTestTestTestTest)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestTestTestTestTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
  /**
   * 测试 trim 的值
   */
  trim?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestTestTestTestTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test_test_test\`
 * @更新时间 1568765164
*/
type GetMethodTestTestTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/getMethod_test_test_test_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test_test_test\`
 * @更新时间 1568765164
*/
const getMethodTestTestTestTestTestRequestConfig: GetMethodTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/getMethod_test_test_test_test_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const getMethodTestTestTestTestTest = makeRequest<GetMethodTestTestTestTestTestRequest, GetMethodTestTestTestTestTestResponse, GetMethodTestTestTestTestTestRequestConfig>(getMethodTestTestTestTestTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const useGetMethodTestTestTestTestTest = makeRequestHook<GetMethodTestTestTestTestTestRequest, GetMethodTestTestTestTestTestRequestConfig, ReturnType<typeof getMethodTestTestTestTestTest>>(getMethodTestTestTestTestTest)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestTestTestTestTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestTestTestTestTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test_test_test\`
 * @更新时间 1568765164
*/
type Json5ResponseTestTestTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/json5Response_test_test_test_test_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test_test_test\`
 * @更新时间 1568765164
*/
const json5ResponseTestTestTestTestTestRequestConfig: Json5ResponseTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/json5Response_test_test_test_test_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTestTestTestTestTest = makeRequest<Json5ResponseTestTestTestTestTestRequest, Json5ResponseTestTestTestTestTestResponse, Json5ResponseTestTestTestTestTestRequestConfig>(json5ResponseTestTestTestTestTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const useJson5ResponseTestTestTestTestTest = makeRequestHook<Json5ResponseTestTestTestTestTestRequest, Json5ResponseTestTestTestTestTestRequestConfig, ReturnType<typeof json5ResponseTestTestTestTestTest>>(json5ResponseTestTestTestTestTest)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestTestTestTestTestRequest {
  id: number;
  name: string;
  likes: {}[];
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface Json5RequestTestTestTestTestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test_test_test\`
 * @更新时间 1568765164
*/
type Json5RequestTestTestTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/json5Request_test_test_test_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test_test_test\`
 * @更新时间 1568765164
*/
const json5RequestTestTestTestTestTestRequestConfig: Json5RequestTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/json5Request_test_test_test_test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const json5RequestTestTestTestTestTest = makeRequest<Json5RequestTestTestTestTestTestRequest, Json5RequestTestTestTestTestTestResponse, Json5RequestTestTestTestTestTestRequestConfig>(json5RequestTestTestTestTestTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const useJson5RequestTestTestTestTestTest = makeRequestHook<Json5RequestTestTestTestTestTestRequest, Json5RequestTestTestTestTestTestRequestConfig, ReturnType<typeof json5RequestTestTestTestTestTest>>(json5RequestTestTestTestTestTest)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestTestTestTestTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestTestTestTestTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test_test_test\`
 * @更新时间 1568765164
*/
type PostMethodTestTestTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/postMethod_test_test_test_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test_test_test\`
 * @更新时间 1568765164
*/
const postMethodTestTestTestTestTestRequestConfig: PostMethodTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/postMethod_test_test_test_test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const postMethodTestTestTestTestTest = makeRequest<PostMethodTestTestTestTestTestRequest, PostMethodTestTestTestTestTestResponse, PostMethodTestTestTestTestTestRequestConfig>(postMethodTestTestTestTestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const usePostMethodTestTestTestTestTest = makeRequestHook<PostMethodTestTestTestTestTestRequest, PostMethodTestTestTestTestTestRequestConfig, ReturnType<typeof postMethodTestTestTestTestTest>>(postMethodTestTestTestTestTest)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestTestTestTestTestRequest {
  /**
   * X 值
   */
  x: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestTestTestTestTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test_test_test\`
 * @更新时间 1568765164
*/
type PutMethodTestTestTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/putMethod_test_test_test_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test_test_test\`
 * @更新时间 1568765164
*/
const putMethodTestTestTestTestTestRequestConfig: PutMethodTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/putMethod_test_test_test_test_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const putMethodTestTestTestTestTest = makeRequest<PutMethodTestTestTestTestTestRequest, PutMethodTestTestTestTestTestResponse, PutMethodTestTestTestTestTestRequestConfig>(putMethodTestTestTestTestTestRequestConfig)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod_test_test_test_test_test\`
 * @更新时间 1568765164
 */
export const usePutMethodTestTestTestTestTest = makeRequestHook<PutMethodTestTestTestTestTestRequest, PutMethodTestTestTestTestTestRequestConfig, ReturnType<typeof putMethodTestTestTestTestTest>>(putMethodTestTestTestTestTest)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestTestTestTestTestRequest {
  /**
   * X 值
   */
  x: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestTestTestTestTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test_test_test\`
 * @更新时间 1568765165
*/
type DataKeyExampleTestTestTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/dataKeyExample_test_test_test_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test_test_test\`
 * @更新时间 1568765165
*/
const dataKeyExampleTestTestTestTestTestRequestConfig: DataKeyExampleTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/dataKeyExample_test_test_test_test_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTestTestTestTestTest = makeRequest<DataKeyExampleTestTestTestTestTestRequest, DataKeyExampleTestTestTestTestTestResponse, DataKeyExampleTestTestTestTestTestRequestConfig>(dataKeyExampleTestTestTestTestTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const useDataKeyExampleTestTestTestTestTest = makeRequestHook<DataKeyExampleTestTestTestTestTestRequest, DataKeyExampleTestTestTestTestTestRequestConfig, ReturnType<typeof dataKeyExampleTestTestTestTestTest>>(dataKeyExampleTestTestTestTestTest)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test_test_test\`
 * @更新时间 1582161261
 */
export interface UploadTestTestTestTestTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test_test_test\`
 * @更新时间 1582161261
 */
export interface UploadTestTestTestTestTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test_test_test\`
 * @更新时间 1582161261
*/
type UploadTestTestTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/upload_test_test_test_test_test\\",
  undefined,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test_test_test\`
 * @更新时间 1582161261
*/
const uploadTestTestTestTestTestRequestConfig: UploadTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/upload_test_test_test_test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test_test_test\`
 * @更新时间 1582161261
 */
export const uploadTestTestTestTestTest = makeRequest<UploadTestTestTestTestTestRequest, UploadTestTestTestTestTestResponse, UploadTestTestTestTestTestRequestConfig>(uploadTestTestTestTestTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload_test_test_test_test_test\`
 * @更新时间 1582161261
 */
export const useUploadTestTestTestTestTest = makeRequestHook<UploadTestTestTestTestTestRequest, UploadTestTestTestTestTestRequestConfig, ReturnType<typeof uploadTestTestTestTestTest>>(uploadTestTestTestTestTest)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestTestTestTestTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestTestTestTestTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test_test_test\`
 * @更新时间 1568765165
*/
type NoResponseDataTestTestTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/noResponseData_test_test_test_test_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test_test_test\`
 * @更新时间 1568765165
*/
const noResponseDataTestTestTestTestTestRequestConfig: NoResponseDataTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/noResponseData_test_test_test_test_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTestTestTestTestTest = makeRequest<NoResponseDataTestTestTestTestTestRequest, NoResponseDataTestTestTestTestTestResponse, NoResponseDataTestTestTestTestTestRequestConfig>(noResponseDataTestTestTestTestTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const useNoResponseDataTestTestTestTestTest = makeRequestHook<NoResponseDataTestTestTestTestTestRequest, NoResponseDataTestTestTestTestTestRequestConfig, ReturnType<typeof noResponseDataTestTestTestTestTest>>(noResponseDataTestTestTestTestTest)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestTestTestTestTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestTestTestTestTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test_test_test\`
 * @更新时间 1568765165
*/
type EmptyResponseTestTestTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/emptyResponse_test_test_test_test_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test_test_test\`
 * @更新时间 1568765165
*/
const emptyResponseTestTestTestTestTestRequestConfig: EmptyResponseTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/emptyResponse_test_test_test_test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTestTestTestTestTest = makeRequest<EmptyResponseTestTestTestTestTestRequest, EmptyResponseTestTestTestTestTestResponse, EmptyResponseTestTestTestTestTestRequestConfig>(emptyResponseTestTestTestTestTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const useEmptyResponseTestTestTestTestTest = makeRequestHook<EmptyResponseTestTestTestTestTestRequest, EmptyResponseTestTestTestTestTestRequestConfig, ReturnType<typeof emptyResponseTestTestTestTestTest>>(emptyResponseTestTestTestTestTest)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface TestTestTestTestTestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface TestTestTestTestTestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test_test\`
 * @更新时间 1568765165
*/
type TestTestTestTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test_test\`
 * @更新时间 1568765165
*/
const testTestTestTestTestTestRequestConfig: TestTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  requestDataOptional: false,
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const testTestTestTestTestTest = makeRequest<TestTestTestTestTestTestRequest, TestTestTestTestTestTestResponse, TestTestTestTestTestTestRequestConfig>(testTestTestTestTestTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const useTestTestTestTestTestTest = makeRequestHook<TestTestTestTestTestTestRequest, TestTestTestTestTestTestRequestConfig, ReturnType<typeof testTestTestTestTestTest>>(testTestTestTestTestTest)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestTestTestTestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestTestTestTestTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test_test_test\`
 * @更新时间 1568765165
*/
type HihihiTestTestTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/test/{id}/:hihihi_test_test_test_test_test\\",
  undefined,
  'hihihi' | 'id',
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test_test_test\`
 * @更新时间 1568765165
*/
const hihihiTestTestTestTestTestRequestConfig: HihihiTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/test/{id}/:hihihi_test_test_test_test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  requestDataOptional: false,
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const hihihiTestTestTestTestTest = makeRequest<HihihiTestTestTestTestTestRequest, HihihiTestTestTestTestTestResponse, HihihiTestTestTestTestTestRequestConfig>(hihihiTestTestTestTestTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi_test_test_test_test_test\`
 * @更新时间 1568765165
 */
export const useHihihiTestTestTestTestTest = makeRequestHook<HihihiTestTestTestTestTestRequest, HihihiTestTestTestTestTestRequestConfig, ReturnType<typeof hihihiTestTestTestTestTest>>(hihihiTestTestTestTestTest)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test_test_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestTestTestTestTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test_test_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestTestTestTestTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test_test_test\`
 * @更新时间 1568765166
*/
type RawResponseTestTestTestTestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/rawResponse_test_test_test_test_test\\",
  undefined,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test_test_test\`
 * @更新时间 1568765166
*/
const rawResponseTestTestTestTestTestRequestConfig: RawResponseTestTestTestTestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/rawResponse_test_test_test_test_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test_test_test\`
 * @更新时间 1568765166
 */
export const rawResponseTestTestTestTestTest = makeRequest<RawResponseTestTestTestTestTestRequest, RawResponseTestTestTestTestTestResponse, RawResponseTestTestTestTestTestRequestConfig>(rawResponseTestTestTestTestTestRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse_test_test_test_test_test\`
 * @更新时间 1568765166
 */
export const useRawResponseTestTestTestTestTest = makeRequestHook<RawResponseTestTestTestTestTestRequest, RawResponseTestTestTestTestTestRequestConfig, ReturnType<typeof rawResponseTestTestTestTestTest>>(rawResponseTestTestTestTestTest)",
]
`;
