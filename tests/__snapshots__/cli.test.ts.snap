// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cli help: help 1`] = `
"
# 用法
  初始化配置文件: ytt init
  生成代码: ytt
  查看版本: ytt version
  查看帮助: ytt help

# GitHub
  https://github.com/fjc0k/yapi-to-typescript
"
`;

exports[`cli 检查到已有配置，可以选择不覆盖: 不覆盖后的配置文件 1`] = `"hello"`;

exports[`cli 检查到已有配置，可以选择不覆盖: 修改过的配置文件 1`] = `"hello"`;

exports[`cli 检查到已有配置，可以选择不覆盖: 配置文件 1`] = `
"import { Config } from 'yapi-to-typescript'

const config: Config = [
  {
    serverUrl: 'http://foo.bar',
    typesOnly: false,
    reactHooks: {
      enabled: false,
    },
    prodEnvName: 'production',
    outputFilePath: 'src/api/index.ts',
    requestFunctionFilePath: 'src/api/request.ts',
    dataKey: 'data',
    projects: [
      {
        token: 'hello',
        categories: [
          {
            id: 50,
            getRequestFunctionName(interfaceInfo, changeCase) {
              return changeCase.camelCase(
                interfaceInfo.parsedPath.name,
              )
            },
          },
        ],
      },
    ],
  },
]

export default config"
`;

exports[`cli 检查到已有配置，可以选择覆盖: 修改过的配置文件 1`] = `"hello"`;

exports[`cli 检查到已有配置，可以选择覆盖: 覆盖后的配置文件 1`] = `
"import { Config } from 'yapi-to-typescript'

const config: Config = [
  {
    serverUrl: 'http://foo.bar',
    typesOnly: false,
    reactHooks: {
      enabled: false,
    },
    prodEnvName: 'production',
    outputFilePath: 'src/api/index.ts',
    requestFunctionFilePath: 'src/api/request.ts',
    dataKey: 'data',
    projects: [
      {
        token: 'hello',
        categories: [
          {
            id: 50,
            getRequestFunctionName(interfaceInfo, changeCase) {
              return changeCase.camelCase(
                interfaceInfo.parsedPath.name,
              )
            },
          },
        ],
      },
    ],
  },
]

export default config"
`;

exports[`cli 检查到已有配置，可以选择覆盖: 配置文件 1`] = `
"import { Config } from 'yapi-to-typescript'

const config: Config = [
  {
    serverUrl: 'http://foo.bar',
    typesOnly: false,
    reactHooks: {
      enabled: false,
    },
    prodEnvName: 'production',
    outputFilePath: 'src/api/index.ts',
    requestFunctionFilePath: 'src/api/request.ts',
    dataKey: 'data',
    projects: [
      {
        token: 'hello',
        categories: [
          {
            id: 50,
            getRequestFunctionName(interfaceInfo, changeCase) {
              return changeCase.camelCase(
                interfaceInfo.parsedPath.name,
              )
            },
          },
        ],
      },
    ],
  },
]

export default config"
`;

exports[`cli 正确初始化配置文件 & 生成结果: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

// makeRequest
function makeRequestRequired<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequestOptional<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequest<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(requestConfig: TRequestConfig) {
  const optional = makeRequestOptional<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  const required = makeRequestRequired<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  return (requestConfig.requestDataOptional ? optional : required) as TRequestConfig['requestDataOptional'] extends true
    ? typeof optional
    : typeof required
}

// Request
export type Request<
  TReqeustData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod\`
 * @更新时间 1568765163
 */
export interface DeleteMethodRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod\`
 * @更新时间 1568765163
 */
export interface DeleteMethodResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod\`
 * @更新时间 1568765163
 */
type DeleteMethodRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/deleteMethod', undefined, string, false>
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod\`
 * @更新时间 1568765163
 */
const deleteMethodRequestConfig: DeleteMethodRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/deleteMethod',
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /deleteMethod\`
 * @更新时间 1568765163
 */
export const deleteMethod = makeRequest<DeleteMethodRequest, DeleteMethodResponse, DeleteMethodRequestConfig>(
  deleteMethodRequestConfig,
)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod\`
 * @更新时间 1568765164
 */
export interface GetMethodRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
  /**
   * 测试 trim 的值
   */
  trim?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod\`
 * @更新时间 1568765164
 */
export interface GetMethodResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod\`
 * @更新时间 1568765164
 */
type GetMethodRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/getMethod', undefined, string, false>
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod\`
 * @更新时间 1568765164
 */
const getMethodRequestConfig: GetMethodRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/getMethod',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /getMethod\`
 * @更新时间 1568765164
 */
export const getMethod = makeRequest<GetMethodRequest, GetMethodResponse, GetMethodRequestConfig>(
  getMethodRequestConfig,
)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response\`
 * @更新时间 1568765164
 */
export interface Json5ResponseRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response\`
 * @更新时间 1568765164
 */
export interface Json5ResponseResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response\`
 * @更新时间 1568765164
 */
type Json5ResponseRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/json5Response', undefined, string, true>
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response\`
 * @更新时间 1568765164
 */
const json5ResponseRequestConfig: Json5ResponseRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/json5Response',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /json5Response\`
 * @更新时间 1568765164
 */
export const json5Response = makeRequest<Json5ResponseRequest, Json5ResponseResponse, Json5ResponseRequestConfig>(
  json5ResponseRequestConfig,
)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request\`
 * @更新时间 1568765164
 */
export interface Json5RequestRequest {
  id: number
  name: string
  likes: {}[]
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request\`
 * @更新时间 1568765164
 */
export interface Json5RequestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request\`
 * @更新时间 1568765164
 */
type Json5RequestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/json5Request', undefined, string, false>
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request\`
 * @更新时间 1568765164
 */
const json5RequestRequestConfig: Json5RequestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/json5Request',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /json5Request\`
 * @更新时间 1568765164
 */
export const json5Request = makeRequest<Json5RequestRequest, Json5RequestResponse, Json5RequestRequestConfig>(
  json5RequestRequestConfig,
)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod\`
 * @更新时间 1568765164
 */
export interface PostMethodRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod\`
 * @更新时间 1568765164
 */
export interface PostMethodResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod\`
 * @更新时间 1568765164
 */
type PostMethodRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/postMethod', undefined, string, false>
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod\`
 * @更新时间 1568765164
 */
const postMethodRequestConfig: PostMethodRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/postMethod',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /postMethod\`
 * @更新时间 1568765164
 */
export const postMethod = makeRequest<PostMethodRequest, PostMethodResponse, PostMethodRequestConfig>(
  postMethodRequestConfig,
)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod\`
 * @更新时间 1568765164
 */
export interface PutMethodRequest {
  /**
   * X 值
   */
  x: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod\`
 * @更新时间 1568765164
 */
export interface PutMethodResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod\`
 * @更新时间 1568765164
 */
type PutMethodRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/putMethod', undefined, string, false>
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod\`
 * @更新时间 1568765164
 */
const putMethodRequestConfig: PutMethodRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/putMethod',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /putMethod\`
 * @更新时间 1568765164
 */
export const putMethod = makeRequest<PutMethodRequest, PutMethodResponse, PutMethodRequestConfig>(
  putMethodRequestConfig,
)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleRequest {
  /**
   * X 值
   */
  x: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample\`
 * @更新时间 1568765165
 */
type DataKeyExampleRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/dataKeyExample', undefined, string, false>
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample\`
 * @更新时间 1568765165
 */
const dataKeyExampleRequestConfig: DataKeyExampleRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/dataKeyExample',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /dataKeyExample\`
 * @更新时间 1568765165
 */
export const dataKeyExample = makeRequest<DataKeyExampleRequest, DataKeyExampleResponse, DataKeyExampleRequestConfig>(
  dataKeyExampleRequestConfig,
)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload\`
 * @更新时间 1582161261
 */
export interface UploadRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload\`
 * @更新时间 1582161261
 */
export interface UploadResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload\`
 * @更新时间 1582161261
 */
type UploadRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/upload', undefined, string, false>
>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload\`
 * @更新时间 1582161261
 */
const uploadRequestConfig: UploadRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/upload',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: false,
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /upload\`
 * @更新时间 1582161261
 */
export const upload = makeRequest<UploadRequest, UploadResponse, UploadRequestConfig>(uploadRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData\`
 * @更新时间 1568765165
 */
export interface NoResponseDataRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData\`
 * @更新时间 1568765165
 */
export interface NoResponseDataResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData\`
 * @更新时间 1568765165
 */
type NoResponseDataRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/noResponseData', undefined, string, true>
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData\`
 * @更新时间 1568765165
 */
const noResponseDataRequestConfig: NoResponseDataRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/noResponseData',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /noResponseData\`
 * @更新时间 1568765165
 */
export const noResponseData = makeRequest<NoResponseDataRequest, NoResponseDataResponse, NoResponseDataRequestConfig>(
  noResponseDataRequestConfig,
)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse\`
 * @更新时间 1568765165
 */
export interface EmptyResponseRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse\`
 * @更新时间 1568765165
 */
export interface EmptyResponseResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse\`
 * @更新时间 1568765165
 */
type EmptyResponseRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/emptyResponse', undefined, string, true>
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse\`
 * @更新时间 1568765165
 */
const emptyResponseRequestConfig: EmptyResponseRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/emptyResponse',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /emptyResponse\`
 * @更新时间 1568765165
 */
export const emptyResponse = makeRequest<EmptyResponseRequest, EmptyResponseResponse, EmptyResponseRequestConfig>(
  emptyResponseRequestConfig,
)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1568765165
 */
export interface TestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1568765165
 */
export interface TestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1568765165
 */
type TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/path/:id/hello/:name/:pass/{avatar}/:test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1568765165
 */
const testRequestConfig: TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/path/:id/hello/:name/:pass/{avatar}/:test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  requestDataOptional: false,
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1568765165
 */
export const test = makeRequest<TestRequest, TestResponse, TestRequestConfig>(testRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi\`
 * @更新时间 1568765165
 */
export interface HihihiRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi\`
 * @更新时间 1568765165
 */
export interface HihihiResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi\`
 * @更新时间 1568765165
 */
type HihihiRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/test/{id}/:hihihi',
    undefined,
    'hihihi' | 'id',
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi\`
 * @更新时间 1568765165
 */
const hihihiRequestConfig: HihihiRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/test/{id}/:hihihi',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  requestDataOptional: false,
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /test/{id}/:hihihi\`
 * @更新时间 1568765165
 */
export const hihihi = makeRequest<HihihiRequest, HihihiResponse, HihihiRequestConfig>(hihihiRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse\`
 * @更新时间 1568765166
 */
export interface RawResponseRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse\`
 * @更新时间 1568765166
 */
export type RawResponseResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse\`
 * @更新时间 1568765166
 */
type RawResponseRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/rawResponse', undefined, string, true>
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse\`
 * @更新时间 1568765166
 */
const rawResponseRequestConfig: RawResponseRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/rawResponse',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  requestDataOptional: true,
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /rawResponse\`
 * @更新时间 1568765166
 */
export const rawResponse = makeRequest<RawResponseRequest, RawResponseResponse, RawResponseRequestConfig>(
  rawResponseRequestConfig,
)

/* prettier-ignore-end */
"
`;

exports[`cli 正确初始化配置文件 & 生成结果: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`cli 正确初始化配置文件 & 生成结果: 配置文件 1`] = `
"import { Config } from 'yapi-to-typescript'

const config: Config = [
  {
    serverUrl: 'http://foo.bar',
    typesOnly: false,
    reactHooks: {
      enabled: false,
    },
    prodEnvName: 'production',
    outputFilePath: 'src/api/index.ts',
    requestFunctionFilePath: 'src/api/request.ts',
    dataKey: 'data',
    projects: [
      {
        token: 'hello',
        categories: [
          {
            id: 50,
            getRequestFunctionName(interfaceInfo, changeCase) {
              return changeCase.camelCase(
                interfaceInfo.parsedPath.name,
              )
            },
          },
        ],
      },
    ],
  },
]

export default config"
`;
